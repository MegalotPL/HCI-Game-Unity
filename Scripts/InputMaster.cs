//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""PlayerOne"",
            ""id"": ""aa4ed790-5737-4575-9328-4692ddae9b1f"",
            ""actions"": [
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3b9c0c9d-239c-4d91-a139-c179b18a275c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backwords"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7bd7be91-c155-434e-8dea-e0e4d005ce93"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7aaae235-41a7-49ad-9ccb-5d22b4a81ea4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8daeed6e-ad1c-4a65-beb2-9ff3a1ec755a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb16a673-1b73-44a6-adb7-802e26f6ad3a"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Schame"",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80f686ed-dfbb-4032-b92c-6e4e45b22fd0"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Schame"",
                    ""action"": ""Backwords"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55dbda30-8c09-408f-9034-0cb56aa69f06"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Schame"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07f38c77-6394-4a69-af2b-a682a0f9524d"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Schame"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Xbox Control Schame"",
            ""bindingGroup"": ""Xbox Control Schame"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerOne
        m_PlayerOne = asset.FindActionMap("PlayerOne", throwIfNotFound: true);
        m_PlayerOne_Acceleration = m_PlayerOne.FindAction("Acceleration", throwIfNotFound: true);
        m_PlayerOne_Backwords = m_PlayerOne.FindAction("Backwords", throwIfNotFound: true);
        m_PlayerOne_Left = m_PlayerOne.FindAction("Left", throwIfNotFound: true);
        m_PlayerOne_Right = m_PlayerOne.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerOne
    private readonly InputActionMap m_PlayerOne;
    private IPlayerOneActions m_PlayerOneActionsCallbackInterface;
    private readonly InputAction m_PlayerOne_Acceleration;
    private readonly InputAction m_PlayerOne_Backwords;
    private readonly InputAction m_PlayerOne_Left;
    private readonly InputAction m_PlayerOne_Right;
    public struct PlayerOneActions
    {
        private @InputMaster m_Wrapper;
        public PlayerOneActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Acceleration => m_Wrapper.m_PlayerOne_Acceleration;
        public InputAction @Backwords => m_Wrapper.m_PlayerOne_Backwords;
        public InputAction @Left => m_Wrapper.m_PlayerOne_Left;
        public InputAction @Right => m_Wrapper.m_PlayerOne_Right;
        public InputActionMap Get() { return m_Wrapper.m_PlayerOne; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerOneActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerOneActions instance)
        {
            if (m_Wrapper.m_PlayerOneActionsCallbackInterface != null)
            {
                @Acceleration.started -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnAcceleration;
                @Acceleration.performed -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnAcceleration;
                @Acceleration.canceled -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnAcceleration;
                @Backwords.started -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnBackwords;
                @Backwords.performed -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnBackwords;
                @Backwords.canceled -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnBackwords;
                @Left.started -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_PlayerOneActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_PlayerOneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Acceleration.started += instance.OnAcceleration;
                @Acceleration.performed += instance.OnAcceleration;
                @Acceleration.canceled += instance.OnAcceleration;
                @Backwords.started += instance.OnBackwords;
                @Backwords.performed += instance.OnBackwords;
                @Backwords.canceled += instance.OnBackwords;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }
        }
    }
    public PlayerOneActions @PlayerOne => new PlayerOneActions(this);
    private int m_XboxControlSchameSchemeIndex = -1;
    public InputControlScheme XboxControlSchameScheme
    {
        get
        {
            if (m_XboxControlSchameSchemeIndex == -1) m_XboxControlSchameSchemeIndex = asset.FindControlSchemeIndex("Xbox Control Schame");
            return asset.controlSchemes[m_XboxControlSchameSchemeIndex];
        }
    }
    public interface IPlayerOneActions
    {
        void OnAcceleration(InputAction.CallbackContext context);
        void OnBackwords(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
